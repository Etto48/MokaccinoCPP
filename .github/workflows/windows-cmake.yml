name: Windows

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  windows-build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Cache PDCurses
      id: pdcurses-cache
      uses: actions/cache@v3
      with:
        path: C:/Program Files/PDCurses
        key: ${{ runner.os }}-PDCurses
      
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Download, compile and install PDCurses
      if: steps.pdcurses-cache.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/wmcbrine/PDCurses.git
        cd PDCurses
        cd wincon
        nmake -f Makefile.vc
        mkdir "C:/Program Files/PDCurses"
        mkdir "C:/Program Files/PDCurses/lib"
        mkdir "C:/Program Files/PDCurses/include"
        cp pdcurses.lib "C:/Program Files/PDCurses/lib"
        cd ../
        cp *.h "C:/Program Files/PDCurses/include"

    - name: Cache PortAudio
      id: portaudio-cache
      uses: actions/cache@v3
      with: 
        path: portaudio-19.7.0
        key: ${{ runner.os }}-PortAudio

    - name: Download and compile PortAudio
      if: steps.portaudio-cache.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest https://github.com/PortAudio/portaudio/archive/refs/tags/v19.7.0.zip -O v19.7.0.zip
        Expand-Archive -Path v19.7.0.zip -DestinationPath ./
        cd portaudio-19.7.0
        cmake -B build
        cmake --build build --config Release
        
    - name: Install PortAudio
      run: |
        cd portaudio-19.7.0
        cmake --install build

    - name: Cache Opus
      id: opus-cache
      uses: actions/cache@v3
      with: 
        path: opus-1.3.1
        key: ${{ runner.os }}-Opus

    - name: Download and compile Opus
      if: steps.opus-cache.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz -O opus-1.3.1.tar.gz
        tar -xvzf opus-1.3.1.tar.gz
        cd opus-1.3.1
        echo "set(CMAKE_BUILD_TYPE ""Release"")" > opus_buildtype.cmake
        cmake -B build
        cmake --build build --config Release
    
    - name: Install Opus
      run: |
        cd opus-1.3.1
        cmake --install build

    - name: Cache Boost
      id: boost-cache
      uses: actions/cache@v3
      with:
        path: C:/Boost
        key: ${{ runner.os }}-Boost

    - name: Download and compile Boost
      if: steps.boost-cache.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.zip -O boost_1_80_0.zip
        Expand-Archive -Path boost_1_80_0.zip -DestinationPath ./
        mv boost_1_80_0 C:/Boost
        cd C:/Boost
        ./bootstrap.bat
        ./b2

    - name: Cache CMake cache
      id: cmake-cache
      uses: actions/cache@v3
      with: 
        path: ${{github.workspace}}/build
        key: ${{ runner.os }}-cmake-build

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

