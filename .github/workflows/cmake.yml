name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install APT packages
      run: |
        sudo apt update
        sudo apt install -y libasound2-dev libboost-dev libboost-chrono-dev libboost-thread-dev libboost-program-options-dev

    - name: Cache PortAudio
      id: portaudio-cache
      uses: actions/cache@v3
      with: 
        path: portaudio-19.7.0
        key: ${{ runner.os }}-PortAudio

    - name: Download and compile PortAudio
      if: steps.portaudio-cache.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/PortAudio/portaudio/archive/refs/tags/v19.7.0.zip
        unzip v19.7.0.zip
        cd portaudio-19.7.0
        cmake -B build
        cmake --build build --config Release
        
    - name: Install PortAudio
      run: |
        cd portaudio-19.7.0
        sudo cmake --install build

    - name: Cache Opus
      id: opus-cache
      uses: actions/cache@v3
      with: 
        path: opus-1.3.1
        key: ${{ runner.os }}-Opus

    - name: Download and compile Opus
      if: steps.opus-cache.outputs.cache-hit != 'true'
      run: |
        wget https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz
        tar -xvzf opus-1.3.1.tar.gz
        cd opus-1.3.1
        ./configure
        make
    
    - name: Install Opus
      run: |
        cd opus-1.3.1
        sudo make install

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

