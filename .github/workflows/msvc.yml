# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# Find more information at:
# https://github.com/microsoft/msvc-code-analysis-action

name: Microsoft C++ Code Analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '41 6 * * 6'

env:
  # Path to the CMake build directory.
  build: '${{ github.workspace }}/build'

permissions:
  contents: read

jobs:
  analyze:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Analyze
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: seanmiddleditch/gha-setup-vsdevenv@master

      - name: Cache PDCurses
        id: pdcurses-cache
        uses: actions/cache@v3
        with:
          path: C:/Program Files/PDCurses
          key: ${{ runner.os }}-PDCurses
      
      - name: Download, compile and install PDCurses
        if: steps.pdcurses-cache.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/wmcbrine/PDCurses.git
          cd PDCurses
          cd wincon
          nmake -f Makefile.vc
          mkdir "C:/Program Files/PDCurses"
          mkdir "C:/Program Files/PDCurses/lib"
          mkdir "C:/Program Files/PDCurses/include"
          cp pdcurses.lib "C:/Program Files/PDCurses/lib"
          cd ../
          cp *.h "C:/Program Files/PDCurses/include"

      - name: Cache PortAudio
        id: portaudio-cache
        uses: actions/cache@v3
        with: 
          path: portaudio-19.7.0
          key: ${{ runner.os }}-PortAudio

      - name: Download and compile PortAudio
        if: steps.portaudio-cache.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest https://github.com/PortAudio/portaudio/archive/refs/tags/v19.7.0.zip -O v19.7.0.zip
          Expand-Archive -Path v19.7.0.zip -DestinationPath ./
          cd portaudio-19.7.0
          cmake -B build
          cmake --build build --config Release
          
      - name: Install PortAudio
        run: |
          cd portaudio-19.7.0
          cmake --install build

      - name: Cache Opus
        id: opus-cache
        uses: actions/cache@v3
        with: 
          path: opus-1.3.1
          key: ${{ runner.os }}-Opus

      - name: Download and compile Opus
        if: steps.opus-cache.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz -O opus-1.3.1.tar.gz
          tar -xvzf opus-1.3.1.tar.gz
          cd opus-1.3.1
          echo "set(CMAKE_BUILD_TYPE ""Release"")" > opus_buildtype.cmake
          cmake -B build
          cmake --build build --config Release
      
      - name: Install Opus
        run: |
          cd opus-1.3.1
          cmake --install build

      - name: Cache Boost
        id: boost-cache
        uses: actions/cache@v3
        with:
          path: C:/Boost
          key: ${{ runner.os }}-Boost

      - name: Download and compile Boost
        if: steps.boost-cache.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.zip -O boost_1_80_0.zip
          Expand-Archive -Path boost_1_80_0.zip -DestinationPath ./
          mv boost_1_80_0 C:/Boost
          cd C:/Boost
          ./bootstrap.bat
          ./b2

      - name: Configure CMake
        run: cmake -B ${{ env.build }}

      # Build is not required unless generated source files are used
      - name: Build CMake
        run: cmake --build ${{ env.build }}
        
      - name: Initialize MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@04825f6d9e00f87422d6bf04e1a38b1f3ed60d99
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset

      # Upload SARIF file to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      # - name: Upload SARIF as an Artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: sarif-file
      #     path: ${{ steps.run-analysis.outputs.sarif }}
